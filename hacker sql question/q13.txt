Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .

Note: A specific contest can be used to screen candidates at more than one college, but each college only holds  screening contest.

Input Format

The following tables hold interview data:

Contests: The contest_id is the id of the contest, hacker_id is the id of the hacker who created the contest, and name is the name of the hacker.

Colleges: The college_id is the id of the college, and contest_id is the id of the contest that Samantha used to screen the candidates.

Challenges: The challenge_id is the id of the challenge that belongs to one of the contests whose contest_id Samantha forgot, and college_id is the id of the college where the challenge was given to candidates.

View_Stats: The challenge_id is the id of the challenge, total_views is the number of times the challenge was viewed by candidates, and total_unique_views is the number of times the challenge was viewed by unique candidates.

Submission_Stats: The challenge_id is the id of the challenge, total_submissions is the number of submissions for the challenge, and total_accepted_submission is the number of submissions that achieved full scores.

Sample Input

Contests Table:Colleges Table:Challenges Table:View_Stats Table:Submission_Stats Table:

Sample Output

66406 17973 Rose 111 39 156 56
66556 79153 Angela 0 0 11 10
94828 80275 Frank 150 38 41 15
Explanation

The contest  is used in the college . In this college , challenges  and  are asked, so from the view and submission stats:

Sum of total submissions 

Sum of total accepted submissions 

Sum of total views 

Sum of total unique views 

Similarly, we can find the sums for contests  and .

 
2
WITH SUM_View_Stats AS (
3
SELECT challenge_id
4
    , total_views = sum(total_views)
5
    , total_unique_views = sum(total_unique_views)
6
FROM View_Stats 
7
GROUP BY challenge_id
8
)
9
,SUM_Submission_Stats AS (
10
SELECT challenge_id
11
    , total_submissions = sum(total_submissions)
12
    , total_accepted_submissions = sum(total_accepted_submissions)
13
FROM Submission_Stats 
14
GROUP BY challenge_id
15
)
16
â€‹
17
SELECT    con.contest_id
18
        , con.hacker_id
19
        , con.name
20
        , SUM(total_submissions)
21
        , sum(total_accepted_submissions)
22
        , sum(total_views)
23
        , sum(total_unique_views)
24
FROM Contests con
25
INNER JOIN Colleges col
26
    ON con.contest_id = col.contest_id
27
INNER JOIN Challenges cha
28
    ON cha.college_id = col.college_id
29
LEFT JOIN SUM_View_Stats vs
30
    ON vs.challenge_id = cha.challenge_id
31
LEFT JOIN SUM_Submission_Stats ss
32
    ON ss.challenge_id = cha.challenge_id
33
GROUP BY con.contest_id,con.hacker_id,con.name
34
HAVING (SUM(total_submissions)
35
        +sum(total_accepted_submissions)
36
        +sum(total_views)
37
        +sum(total_unique_views)) <> 0
38
ORDER BY con.contest_ID/*
39
Enter your query here.
40
Please append a semicolon ";" at the end of the query and enter your query in a single line to avoid error.
41
*/